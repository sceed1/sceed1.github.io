{"version":3,"file":"main.js","mappings":"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","sources":["./src/app/app.component.ts","./src/app/app.module.ts","./src/app/app.routing.ts","./src/app/forecast/forecasts-list/forecasts-list.component.ts","./src/app/index.ts","./src/app/location.service.ts","./src/app/main-page/current-conditions/current-conditions.component.ts","./src/app/main-page/main-page.component.ts","./src/app/main-page/weather-state/weather.action.ts","./src/app/main-page/weather-state/weather.effects.ts","./src/app/main-page/weather-state/weather.reducer.ts","./src/app/main-page/weather-state/weather.selectors.ts","./src/app/main-page/zipcode/location-entry/country-input/country-input.component.ts","./src/app/main-page/zipcode/location-entry/location-entry-state/zip-entry.action.ts","./src/app/main-page/zipcode/location-entry/location-entry-state/zip-entry.effects.ts","./src/app/main-page/zipcode/location-entry/location-entry-state/zip-entry.reducer.ts","./src/app/main-page/zipcode/location-entry/location-entry-state/zip-entry.selector.ts","./src/app/main-page/zipcode/location-entry/location-entry.component.ts","./src/app/shared/location-util.ts","./src/app/shared/template-button/template-button.component.ts","./src/app/weather.service.ts","./src/environments/environment.ts","./src/main.ts"],"sourcesContent":["import {Component} from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n\n    constructor() {\n\n    }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\n\nimport { AppComponent } from './app.component';\nimport { LocationEntryComponent } from './main-page/zipcode/location-entry/location-entry.component';\nimport {LocationService} from \"./location.service\";\nimport { ForecastsListComponent } from './forecast/forecasts-list/forecasts-list.component';\nimport {WeatherService} from \"./weather.service\";\nimport { CurrentConditionsComponent } from './main-page/current-conditions/current-conditions.component';\nimport { MainPageComponent } from './main-page/main-page.component';\nimport {RouterModule} from \"@angular/router\";\nimport {routing} from \"./app.routing\";\nimport {HttpClientModule} from \"@angular/common/http\";\nimport { ServiceWorkerModule } from '@angular/service-worker';\nimport { environment } from '../environments/environment';\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\nimport { reducers, metaReducers } from './index';\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\nimport {WeatherEffects} from './main-page/weather-state/weather.effects';\nimport {ZipEntryEffects} from './main-page/zipcode/location-entry/location-entry-state/zip-entry.effects';\nimport { TemplateButtonComponent } from './shared/template-button/template-button.component';\nimport { CountryInputComponent } from './main-page/zipcode/location-entry/country-input/country-input.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    LocationEntryComponent,\n    CurrentConditionsComponent,\n    ForecastsListComponent,\n    MainPageComponent,\n    TemplateButtonComponent,\n    CountryInputComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpClientModule,\n    RouterModule,\n    routing,\n    ServiceWorkerModule.register('/ngsw-worker.js', {enabled: environment.production}),\n    StoreModule.forRoot({}, {}),\n    EffectsModule.forRoot([WeatherEffects, ZipEntryEffects]),\n    StoreModule.forRoot(reducers, {metaReducers}),\n    !environment.production ? StoreDevtoolsModule.instrument() : [],\n    ReactiveFormsModule\n  ],\n  providers: [LocationService, WeatherService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import {ModuleWithProviders} from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\nimport {MainPageComponent} from \"./main-page/main-page.component\";\nimport {ForecastsListComponent} from './forecast/forecasts-list/forecasts-list.component';\n\nconst appRoutes: Routes = [\n  {\n    path: '', component: MainPageComponent\n  },\n  {\n    path: 'forecast/:zipcode/country/:countryCode', component: ForecastsListComponent\n  }\n];\nexport const routing: ModuleWithProviders<any> = RouterModule.forRoot(appRoutes, { relativeLinkResolution: 'legacy' });\n","import { Component } from '@angular/core';\nimport {WeatherService} from '../../weather.service';\nimport {ActivatedRoute} from '@angular/router';\n\n@Component({\n  selector: 'app-forecasts-list',\n  templateUrl: './forecasts-list.component.html',\n  styleUrls: ['./forecasts-list.component.css']\n})\nexport class ForecastsListComponent {\n\n  zipcode: string;\n  countryCode: string;\n  forecast: any;\n\n  constructor(private weatherService: WeatherService, route : ActivatedRoute) {\n    route.params.subscribe(params => {\n      this.zipcode = params['zipcode'];\n      this.countryCode = params['countryCode'];\n      weatherService.getForecast({zipcode: this.zipcode, countryCode: this.countryCode})\n        .subscribe(data => this.forecast = data);\n    });\n  }\n}\n","import {ActionReducerMap, MetaReducer} from '@ngrx/store';\nimport {environment} from '../environments/environment';\nimport {weatherReducer, weatherFeatureKey, WeatherState} from './main-page/weather-state/weather.reducer';\nimport {\n  zipEntryFeatureKey,\n  zipEntryReducer,\n  ZipEntryState\n} from './main-page/zipcode/location-entry/location-entry-state/zip-entry.reducer';\n\n\nexport interface State {\n  [weatherFeatureKey]: WeatherState;\n  [zipEntryFeatureKey]: ZipEntryState;\n}\n\nexport const reducers: ActionReducerMap<State> = {\n  [weatherFeatureKey]: weatherReducer,\n  [zipEntryFeatureKey]: zipEntryReducer\n};\n\n\nexport const metaReducers: MetaReducer<State>[] = !environment.production ? [] : [];\n","import { Injectable } from '@angular/core';\nimport {WeatherService} from \"./weather.service\";\nimport {Store} from '@ngrx/store';\nimport {addWeatherLocation, removeWeatherLocation} from './main-page/weather-state/weather.action';\nimport {Location} from './data/model';\nimport {equalLocations} from './shared/location-util';\n\nexport const LOCATIONS : string = \"locations\";\n\n@Injectable()\nexport class LocationService {\n\n  locations : Location[] = [];\n\n  constructor(private weatherService : WeatherService, private store: Store) {\n    let locString = localStorage.getItem(LOCATIONS);\n    if (locString)\n      this.locations = JSON.parse(locString);\n    for (let loc of this.locations) {\n      this.store.dispatch(addWeatherLocation(loc, 'automatic'));\n    }\n  }\n\n  addLocation(location: Location){\n    this.store.dispatch(addWeatherLocation(location));\n    this.locations.push(location);\n    localStorage.setItem(LOCATIONS, JSON.stringify(this.locations));\n  }\n\n  removeLocation(location: Location){\n    let loc: Location = this.locations.find(loc => equalLocations(loc, location));\n    if (!!loc){\n      this.store.dispatch(removeWeatherLocation(loc));\n      this.locations = this.locations.filter(location => loc !== location);\n      localStorage.setItem(LOCATIONS, JSON.stringify(this.locations));\n    }\n  }\n}\n","import {Component, OnInit} from '@angular/core';\nimport {WeatherService} from \"../../weather.service\";\nimport {LocationService} from \"../../location.service\";\nimport {Router} from \"@angular/router\";\nimport {Store} from '@ngrx/store';\nimport {interval, Observable} from 'rxjs';\nimport {LocalCondition, Location} from '../../data/model';\nimport {selectAllWeatherConditions} from '../weather-state/weather.selectors';\nimport {refreshAllWeatherLocations} from '../weather-state/weather.action';\n\n@Component({\n  selector: 'app-current-conditions',\n  templateUrl: './current-conditions.component.html',\n  styleUrls: ['./current-conditions.component.css']\n})\nexport class CurrentConditionsComponent implements OnInit {\n\n  currentWeatherConditions$: Observable<LocalCondition[]>;\n  autoRefresh: boolean = false;\n\n  constructor(\n    private weatherService : WeatherService,\n    private locationService : LocationService,\n    private router: Router,\n    private store: Store\n    ) {\n  }\n\n  ngOnInit() {\n    this.currentWeatherConditions$ = this.store.select(selectAllWeatherConditions());\n    interval(30000).subscribe(\n      () => this.autoRefresh ? this.store.dispatch(refreshAllWeatherLocations()) : void 0\n    );\n\n  }\n\n  showForecast(location: Location){\n    this.router.navigate(['/forecast', location.zipcode, 'country', location.countryCode || 'US'])\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-main-page',\n  templateUrl: './main-page.component.html'\n})\nexport class MainPageComponent {\n}\n","import { createAction } from '@ngrx/store';\nimport {APIWeatherConditions, Location} from '../../data/model';\nimport {Modus} from '../zipcode/location-entry/location-entry-state/zip-entry.reducer';\n\nexport const addWeatherLocation = createAction('[Main Page] Add Weather Location',\n  (location: Location, modus: Modus = 'manual') => ({location, modus}));\n\nexport const removeWeatherLocation = createAction('[Main Page] Remove Weather Location',\n  (location: Location) => ({location}));\n\nexport const refreshAllWeatherLocations = createAction('[Main Page] Refresh all tracked weather conditions');\n\nexport const setCurrentConditionsForLocation = createAction('[Main Page] Set current weather conditions for location',\n  (location: Location, conditions: APIWeatherConditions) => ({location, conditions}));\n\n\n","import {Injectable} from '@angular/core';\nimport {Actions, concatLatestFrom, createEffect, ofType} from '@ngrx/effects';\nimport {\n  addWeatherLocation,\n  refreshAllWeatherLocations,\n  setCurrentConditionsForLocation\n} from './weather.action';\nimport {catchError, filter, first, map, mergeMap, switchMap} from 'rxjs';\nimport {WeatherService} from '../../weather.service';\nimport {selectAllWeatherConditions, selectAllWeatherLocations} from './weather.selectors';\nimport {Store} from '@ngrx/store';\nimport {\n  changeButtonState,\n  finishedLoadingWeatherConditions\n} from '../zipcode/location-entry/location-entry-state/zip-entry.action';\nimport {equalLocations} from '../../shared/location-util';\n\n@Injectable()\nexport class WeatherEffects {\n\n  constructor(private actions$: Actions, private weatherService: WeatherService, private store: Store) {}\n\n  changeButtonStateToLoading$ = createEffect(() => this.actions$.pipe(\n    ofType(addWeatherLocation),\n    filter(action => action.modus === 'manual'),\n    concatLatestFrom(() => this.store.select(selectAllWeatherConditions())),\n    filter(([action, conditions]) => !conditions?.find(cond => equalLocations(cond.location, action.location))),\n    map(() => changeButtonState('loading'))\n  ))\n\n  loadWeatherConditionForZipcode$ = createEffect(() => this.actions$.pipe(\n    ofType(addWeatherLocation),\n    concatLatestFrom(() => this.store.select(selectAllWeatherConditions())),\n    filter(([action, conditions]) => !conditions?.find(cond => equalLocations(cond.location, action.location))),\n    switchMap(([action, ]) => this.weatherService.fetchCurrentConditionsForLocation(action.location).pipe(\n      mergeMap((condition) => {\n        let actions: any[] = [setCurrentConditionsForLocation(action.location, condition)];\n        if (action.modus === 'manual') {\n          actions.push(finishedLoadingWeatherConditions())\n        }\n        return actions\n      }),\n      catchError(() => [changeButtonState('initial')])\n      )\n    )\n  ));\n\n  refreshWeatherForAllLocations$ = createEffect(() => this.actions$.pipe(\n    ofType(refreshAllWeatherLocations),\n     switchMap(() => this.store.select(selectAllWeatherLocations()).pipe(\n       first(),\n       mergeMap(locations => locations.values()),\n       mergeMap(location => this.weatherService.fetchCurrentConditionsForLocation(location).pipe(\n         map(conditions => setCurrentConditionsForLocation(location, conditions)))\n       )\n     )),\n  ));\n}\n","import {createReducer, on} from '@ngrx/store';\nimport {addWeatherLocation, removeWeatherLocation, setCurrentConditionsForLocation} from './weather.action';\nimport {APIWeatherConditions, LocalCondition, Location} from '../../data/model';\nimport {equalLocations} from '../../shared/location-util';\n\n\nexport const weatherFeatureKey = 'weather';\n\nexport interface WeatherState {\n  localConditions: LocalCondition[],\n}\n\nexport const initialState: WeatherState = {\n  localConditions: []\n};\n\nexport const weatherReducer = createReducer(\n  initialState,\n  on(addWeatherLocation, (state, action) => ({\n    localConditions: state.localConditions.find(cond => (equalLocations(cond.location, action.location)))\n      ? state.localConditions\n      : state.localConditions.concat({\n        location: action.location,\n        condition: undefined\n      })\n  })),\n  on(setCurrentConditionsForLocation, (state, action) => ({\n    ...state,\n    localConditions: setConditionForLocationWithZipcode(action.location, action.conditions, state.localConditions)\n  })),\n  on(removeWeatherLocation, (state, action) => ({\n    localConditions: state.localConditions.filter(cond => !equalLocations(cond.location, action.location))\n  }))\n);\n\nconst setConditionForLocationWithZipcode = (location: Location, condition: APIWeatherConditions, state: LocalCondition[]): LocalCondition[] => {\n  const localConditions: LocalCondition[] = JSON.parse(JSON.stringify(state));\n  localConditions.map(cond => {\n    if (equalLocations(cond.location, location)) {\n      cond.condition = condition;\n    }\n  })\n  return localConditions;\n}\n","import { createFeatureSelector, createSelector } from '@ngrx/store';\nimport {weatherFeatureKey, WeatherState} from './weather.reducer';\n\nconst selectWeatherState = createFeatureSelector<WeatherState>(weatherFeatureKey);\n\nexport const selectAllWeatherConditions = () =>\n  createSelector(selectWeatherState, (state) => state.localConditions\n    .filter(cond => cond.condition));\n\nexport const selectAllWeatherLocations = () =>\n  createSelector(selectWeatherState, (state) => state.localConditions\n    .map(localCondition => localCondition.location));\n","import {Component, EventEmitter, OnInit, Output} from '@angular/core';\nimport {Country} from '../../../../data/model';\nimport Countries from '../../../../../assets/countries.json';\nimport {FormBuilder} from '@angular/forms';\nimport {distinctUntilChanged} from 'rxjs';\n\n@Component({\n  selector: 'app-country-input',\n  templateUrl: './country-input.component.html',\n  styleUrls: ['./country-input.component.scss']\n})\nexport class CountryInputComponent implements OnInit {\n\n  @Output() selectCountryEvent = new EventEmitter<Country>();\n\n  public countries: Country[] = Countries;\n  public form;\n  public searchValue = '';\n  filteredCountries: Country[] = [];\n  countrySelected = false;\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      country: ['']\n    })\n\n    this.form.get('country').valueChanges.pipe(\n      distinctUntilChanged(),\n    ).subscribe(searchValue => {\n      this.searchValue = searchValue.toLowerCase();\n      this.countrySelected = false;\n      this.filteredCountries = this.countries.filter(country => country.name.toLowerCase().includes(this.searchValue))\n    });\n  }\n\n  focusOut = () => {\n    if (!this.countrySelected) {\n      this.selectCountryEvent.emit(null);\n    }\n  }\n\n  selectCountry = (country: Country) => {\n    this.form.controls['country'].setValue(country.name);\n    this.countrySelected = true;\n    this.selectCountryEvent.emit(country);\n  }\n\n  getText = (name: string) => {\n    const searchIndex = name.toLowerCase().indexOf(this.searchValue);\n    return name.slice(searchIndex, searchIndex + this.searchValue.length);\n  }\n\n  getPrefix = (name: string) => name.slice(0, name.toLowerCase().indexOf(this.searchValue));\n\n\n  getSuffix = (name: string) => name.slice(name.toLowerCase().indexOf(this.searchValue) + this.searchValue.length);\n\n}\n","import {createAction} from '@ngrx/store';\nimport {ButtonState} from './zip-entry.reducer';\n\nexport const changeButtonState = createAction('[Zip Entry] Change the buttonState', (buttonState: ButtonState) =>\n  ({buttonState}));\n\nexport const finishedLoadingWeatherConditions = createAction('[Zip Entry] Finished loading weather conditions');\n","import { Injectable } from '@angular/core';\nimport {Actions, createEffect, ofType} from '@ngrx/effects';\nimport {changeButtonState, finishedLoadingWeatherConditions} from './zip-entry.action';\nimport {delay, map} from 'rxjs';\n\n\n\n@Injectable()\nexport class ZipEntryEffects {\n\n  constructor(private actions$: Actions) {}\n\n  resetButtonStateAfterFinishLoading$ = createEffect(() => this.actions$.pipe(\n    ofType(finishedLoadingWeatherConditions),\n    delay(500),\n    map(() => changeButtonState('initial'))\n  ));\n}\n","import {createReducer, on} from '@ngrx/store';\nimport {changeButtonState, finishedLoadingWeatherConditions} from './zip-entry.action';\n\nexport const zipEntryFeatureKey = 'zipEntry';\n\nexport type ButtonState = 'initial' | 'loading' | 'done';\n\nexport type Modus = 'manual' | 'automatic';\n\nexport interface ZipEntryState {\n  addLocationButtonState: ButtonState\n}\n\nexport const initialState: ZipEntryState = {\n  addLocationButtonState: 'initial'\n};\n\nexport const zipEntryReducer = createReducer(\n  initialState,\n  on(changeButtonState, (_, action) => ({\n    addLocationButtonState: action.buttonState\n  })),\n  on(finishedLoadingWeatherConditions, (_) => ({\n    addLocationButtonState: 'done'\n  }))\n);\n","import {createFeatureSelector, createSelector} from '@ngrx/store';\nimport {zipEntryFeatureKey, ZipEntryState} from './zip-entry.reducer';\n\nconst selectZipEntryState = createFeatureSelector<ZipEntryState>(zipEntryFeatureKey);\n\nexport const selectButtonState = () =>\n  createSelector(selectZipEntryState, (state) => state.addLocationButtonState);\n","import {Component, OnInit, TemplateRef, ViewChild} from '@angular/core';\nimport {LocationService} from \"../../../location.service\";\nimport {Store} from '@ngrx/store';\nimport {selectButtonState} from './location-entry-state/zip-entry.selector';\nimport {Country} from '../../../data/model';\nimport {ButtonState} from './location-entry-state/zip-entry.reducer';\n\n@Component({\n  selector: 'app-location-entry',\n  templateUrl: './location-entry.component.html'\n})\nexport class LocationEntryComponent implements OnInit {\n\n  public addLocationButtonState$\n\n  public selectedCountry: Country\n\n  @ViewChild('initial', { read: TemplateRef }) initialButtonTemplate:TemplateRef<any>;\n  @ViewChild('loading', { read: TemplateRef }) loadingButtonTemplate:TemplateRef<any>;\n  @ViewChild('done', { read: TemplateRef }) doneButtonTemplate:TemplateRef<any>;\n\n  constructor(private service : LocationService, private store: Store) { }\n\n  ngOnInit() {\n    this.addLocationButtonState$ = this.store.select(selectButtonState());\n  }\n\n  addLocation = (zipcode : string) => this.service.addLocation({zipcode, countryCode: this.selectedCountry?.code});\n\n  determineTemplateRef = (buttonState: ButtonState) => {\n    if (buttonState === 'done') { return this.doneButtonTemplate; }\n    else if (buttonState === 'loading') { return this.loadingButtonTemplate; }\n    else { return this.initialButtonTemplate; }\n  }\n\n  isButtonDisabled = (buttonState: ButtonState) => buttonState !== 'initial';\n\n  selectCountry = (country: Country) => this.selectedCountry = country;\n\n}\n","import {Location} from '../data/model';\n\nexport const equalLocations = (loc1: Location, loc2: Location) =>\n  loc1.zipcode === loc2.zipcode && loc1.countryCode === loc2.countryCode;\n","import {ChangeDetectionStrategy, Component, EventEmitter, Input, Output, TemplateRef} from '@angular/core';\n\n@Component({\n  selector: 'app-template-button',\n  templateUrl: './template-button.component.html',\n  styleUrls: ['./template-button.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TemplateButtonComponent {\n\n  @Input() currentTemplate: TemplateRef<any>;\n  @Input() disabled = false;\n\n  @Output() buttonClicked = new EventEmitter<void>;\n\n  triggerAction() {\n    this.buttonClicked.emit();\n  }\n\n}\n","import {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs';\n\nimport {HttpClient} from '@angular/common/http';\nimport {APIWeatherConditions, Location} from './data/model';\n\n@Injectable()\nexport class WeatherService {\n\n  static URL = 'https://api.openweathermap.org/data/2.5';\n  static APPID = '5a4b2d457ecbef9eb2a71e480b947604';\n  static ICON_URL = 'https://raw.githubusercontent.com/udacity/Sunshine-Version-2/sunshine_master/app/src/main/res/drawable-hdpi/';\n  private currentConditions = [];\n\n  constructor(private http: HttpClient) { }\n\n  fetchCurrentConditionsForLocation = (location: Location): Observable<APIWeatherConditions> =>\n    this.http.get<APIWeatherConditions>(`${WeatherService.URL}/weather?zip=${location.zipcode}${location.countryCode ? ',' + location.countryCode : ''}&units=imperial&APPID=${WeatherService.APPID}`)\n\n  getForecast(location: Location): Observable<any> {\n    // Here we make a request to get the forecast data from the API. Note the use of backticks and an expression to insert the zipcode\n    return this.http.get(`${WeatherService.URL}/forecast/daily?zip=${location.zipcode}${location.countryCode ? ',' + location.countryCode : ''}&units=imperial&cnt=5&APPID=${WeatherService.APPID}`);\n\n  }\n\n  getWeatherIcon(id){\n    if (id >= 200 && id <= 232)\n      return WeatherService.ICON_URL + \"art_storm.png\";\n    else if (id >= 501 && id <= 511)\n      return WeatherService.ICON_URL + \"art_rain.png\";\n    else if (id === 500 || (id >= 520 && id <= 531))\n      return WeatherService.ICON_URL + \"art_light_rain.png\";\n    else if (id >= 600 && id <= 622)\n      return WeatherService.ICON_URL + \"art_snow.png\";\n    else if (id >= 801 && id <= 804)\n      return WeatherService.ICON_URL + \"art_clouds.png\";\n    else if (id === 741 || id === 761)\n      return WeatherService.ICON_URL + \"art_fog.png\";\n    else\n      return WeatherService.ICON_URL + \"art_clear.png\";\n  }\n\n}\n","// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `.angular-cli.json`.\n\nexport const environment = {\n  production: false\n};\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n"],"names":[],"sourceRoot":"webpack:///","x_google_ignoreList":[]}